#!/usr/local/bin/node

var program = require('commander'),
    bodule  = require('../').bodule,
    fs      = require('fs'),
    watch   = require('watch'),
    path    = require('path'),
    mkdirp  = require('mkdirp')

program
  .option('-t, --type [type]', 'special wrapper type, cmd or amd')
  .option('-o, --output [path]', 'path to put wrapped files')
  .option('-w, --watch', 'watch file change, auto bodule')
  .parse(process.argv)

// console.log('pwd:' + path.resolve('.'))

var src = program.args[0] || '.',
    dest = program.output || '.bodule',
    type = program.type || 'amd'

var package = require(path.resolve(src) + '/' + 'package.json')

function mkdir(dir) {
    if (!fs.existsSync(dir)) {
        mkdirp.sync(dir)
    }
}


function walk(dir, done) {
    var results = []
    fs.readdir(dir, function(err, list) {
        if (err) return done(err)
        var pending = list.length
        if (!pending) return done(null, results)
        list.forEach(function(file) {
            file = dir + '/' + file
            fs.stat(file, function(err, stat) {
                if (stat && stat.isDirectory()) {
                    walk(file, function(err, res) {
                        results = results.concat(res)
                        if (!--pending) done(null, results)
                    })
                } else {
                    results.push(file)
                    if (!--pending) done(null, results)
                }
            })
        })
    })
}
// Comile file in `filePath` to `dest`

function wrapFile(dirPath, filePath, type, dest) {
    var file, fileName, destFilePath, destFileDirName
    // console.log('start wrap file:' + filePath)
    file = fs.readFileSync(filePath, 'utf8')
    file = bodule(file, {
        type: type,
        name: filePath,
        package: package
    })
    destFilePath = dest + path.resolve(filePath).replace(path.resolve(dirPath), '')
    destFileDirName = path.dirname(destFilePath) 
    mkdir(destFileDirName)
    fs.writeFileSync(destFilePath, file)
    // console.log(filePath + ' is wraped to ' + dest)
}

function wrapDir(dirPath, type, dest) {
    walk(dirPath, function(err, files){
        files =files.filter(function (file) {
            return file.indexOf('.bodule') == -1 && /\.js$/.test(file)
        })
        files.forEach(function (file) {
            wrapFile(dirPath, path.normalize(file), type, dest)
        }) 
    })
}

mkdir(dest)

if (program.watch) {
    if (fs.statSync(src).isDirectory()) {
        console.log(src + ' is watched!')
        watch.createMonitor(src, function (monitor) {
            monitor.on("created", function (f, stat) {
                wrapFile(src, f, type, dest)
            })
            monitor.on("changed", function (f, curr, prev) {
                wrapFile(src, f, type, dest)
            })
        })
    }
}


var files = []
if (src.indexOf('.js') > -1) {
    wrapFile('.', src, type, dest)
} else {
    wrapDir(src, type, dest)
} 
